//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendingMachine.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VendingMachinesEntities : DbContext
    {
        public VendingMachinesEntities()
            : base("name=VendingMachinesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Coins> Coins { get; set; }
        public virtual DbSet<Drinks> Drinks { get; set; }
        public virtual DbSet<VendingMachineCoins> VendingMachineCoins { get; set; }
        public virtual DbSet<VendingMachineDrinks> VendingMachineDrinks { get; set; }
        public virtual DbSet<VendingMachines> VendingMachines { get; set; }
        public virtual DbSet<CountNapitki> CountNapitki { get; set; }
        public virtual DbSet<drinkReport> drinkReport { get; set; }
    
        public virtual int ButtonMoneyOffAndOn(Nullable<int> coin_value, Nullable<int> button_value)
        {
            var coin_valueParameter = coin_value.HasValue ?
                new ObjectParameter("coin_value", coin_value) :
                new ObjectParameter("coin_value", typeof(int));
    
            var button_valueParameter = button_value.HasValue ?
                new ObjectParameter("button_value", button_value) :
                new ObjectParameter("button_value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ButtonMoneyOffAndOn", coin_valueParameter, button_valueParameter);
        }
    
        public virtual int CoinsAdd(Nullable<int> coin_value)
        {
            var coin_valueParameter = coin_value.HasValue ?
                new ObjectParameter("coin_value", coin_value) :
                new ObjectParameter("coin_value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoinsAdd", coin_valueParameter);
        }
    
        public virtual int CoinsDrop(Nullable<int> coin_value)
        {
            var coin_valueParameter = coin_value.HasValue ?
                new ObjectParameter("coin_value", coin_value) :
                new ObjectParameter("coin_value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoinsDrop", coin_valueParameter);
        }
    
        public virtual int CountCoinsUpdate(Nullable<int> coin_value, Nullable<int> coin_count)
        {
            var coin_valueParameter = coin_value.HasValue ?
                new ObjectParameter("coin_value", coin_value) :
                new ObjectParameter("coin_value", typeof(int));
    
            var coin_countParameter = coin_count.HasValue ?
                new ObjectParameter("coin_count", coin_count) :
                new ObjectParameter("coin_count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountCoinsUpdate", coin_valueParameter, coin_countParameter);
        }
    
        public virtual int DrinksDrop(Nullable<int> drinks_id)
        {
            var drinks_idParameter = drinks_id.HasValue ?
                new ObjectParameter("drinks_id", drinks_id) :
                new ObjectParameter("drinks_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DrinksDrop", drinks_idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    }
}
